
LAB3_EXERCISE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003040  08003040  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003040  08003040  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000038  08003080  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003080  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae66  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8e  00000000  00000000  0002aec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ed  00000000  00000000  0002df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b88e  00000000  00000000  0004531d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008539c  00000000  00000000  00050bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002938  00000000  00000000  000d5f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003004 	.word	0x08003004

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003004 	.word	0x08003004

0800014c <off_all_7seg>:
 *      Author: hoang
 */
#include "7_seg_led.h"

int led_buffer[4];
void off_all_7seg(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000156:	480b      	ldr	r0, [pc, #44]	; (8000184 <off_all_7seg+0x38>)
 8000158:	f001 ff33 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <off_all_7seg+0x38>)
 8000164:	f001 ff2d 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <off_all_7seg+0x38>)
 8000170:	f001 ff27 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <off_all_7seg+0x38>)
 800017c:	f001 ff21 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010c00 	.word	0x40010c00

08000188 <update_buffer_7seg>:
void update_buffer_7seg(int num1, int num2){
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1/10;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a18      	ldr	r2, [pc, #96]	; (80001f8 <update_buffer_7seg+0x70>)
 8000196:	fb82 1203 	smull	r1, r2, r2, r3
 800019a:	1092      	asrs	r2, r2, #2
 800019c:	17db      	asrs	r3, r3, #31
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	4a16      	ldr	r2, [pc, #88]	; (80001fc <update_buffer_7seg+0x74>)
 80001a2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1%10;
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <update_buffer_7seg+0x70>)
 80001a8:	fb83 2301 	smull	r2, r3, r3, r1
 80001ac:	109a      	asrs	r2, r3, #2
 80001ae:	17cb      	asrs	r3, r1, #31
 80001b0:	1ad2      	subs	r2, r2, r3
 80001b2:	4613      	mov	r3, r2
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	4413      	add	r3, r2
 80001b8:	005b      	lsls	r3, r3, #1
 80001ba:	1aca      	subs	r2, r1, r3
 80001bc:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <update_buffer_7seg+0x74>)
 80001be:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2/10;
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	4a0d      	ldr	r2, [pc, #52]	; (80001f8 <update_buffer_7seg+0x70>)
 80001c4:	fb82 1203 	smull	r1, r2, r2, r3
 80001c8:	1092      	asrs	r2, r2, #2
 80001ca:	17db      	asrs	r3, r3, #31
 80001cc:	1ad3      	subs	r3, r2, r3
 80001ce:	4a0b      	ldr	r2, [pc, #44]	; (80001fc <update_buffer_7seg+0x74>)
 80001d0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2%10;
 80001d2:	6839      	ldr	r1, [r7, #0]
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <update_buffer_7seg+0x70>)
 80001d6:	fb83 2301 	smull	r2, r3, r3, r1
 80001da:	109a      	asrs	r2, r3, #2
 80001dc:	17cb      	asrs	r3, r1, #31
 80001de:	1ad2      	subs	r2, r2, r3
 80001e0:	4613      	mov	r3, r2
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	4413      	add	r3, r2
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	1aca      	subs	r2, r1, r3
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <update_buffer_7seg+0x74>)
 80001ec:	60da      	str	r2, [r3, #12]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	66666667 	.word	0x66666667
 80001fc:	200000c0 	.word	0x200000c0

08000200 <display7SEG_1>:




void display7SEG_1(int num){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b09      	cmp	r3, #9
 800020c:	f200 8180 	bhi.w	8000510 <display7SEG_1+0x310>
 8000210:	a201      	add	r2, pc, #4	; (adr r2, 8000218 <display7SEG_1+0x18>)
 8000212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000216:	bf00      	nop
 8000218:	08000241 	.word	0x08000241
 800021c:	08000289 	.word	0x08000289
 8000220:	080002d1 	.word	0x080002d1
 8000224:	08000319 	.word	0x08000319
 8000228:	08000361 	.word	0x08000361
 800022c:	080003a9 	.word	0x080003a9
 8000230:	080003f1 	.word	0x080003f1
 8000234:	08000439 	.word	0x08000439
 8000238:	08000481 	.word	0x08000481
 800023c:	080004c9 	.word	0x080004c9
	switch(num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2101      	movs	r1, #1
 8000244:	48b4      	ldr	r0, [pc, #720]	; (8000518 <display7SEG_1+0x318>)
 8000246:	f001 febc 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2102      	movs	r1, #2
 800024e:	48b2      	ldr	r0, [pc, #712]	; (8000518 <display7SEG_1+0x318>)
 8000250:	f001 feb7 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2104      	movs	r1, #4
 8000258:	48af      	ldr	r0, [pc, #700]	; (8000518 <display7SEG_1+0x318>)
 800025a:	f001 feb2 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2108      	movs	r1, #8
 8000262:	48ad      	ldr	r0, [pc, #692]	; (8000518 <display7SEG_1+0x318>)
 8000264:	f001 fead 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2110      	movs	r1, #16
 800026c:	48aa      	ldr	r0, [pc, #680]	; (8000518 <display7SEG_1+0x318>)
 800026e:	f001 fea8 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2120      	movs	r1, #32
 8000276:	48a8      	ldr	r0, [pc, #672]	; (8000518 <display7SEG_1+0x318>)
 8000278:	f001 fea3 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800027c:	2201      	movs	r2, #1
 800027e:	2140      	movs	r1, #64	; 0x40
 8000280:	48a5      	ldr	r0, [pc, #660]	; (8000518 <display7SEG_1+0x318>)
 8000282:	f001 fe9e 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000286:	e143      	b.n	8000510 <display7SEG_1+0x310>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2101      	movs	r1, #1
 800028c:	48a2      	ldr	r0, [pc, #648]	; (8000518 <display7SEG_1+0x318>)
 800028e:	f001 fe98 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2102      	movs	r1, #2
 8000296:	48a0      	ldr	r0, [pc, #640]	; (8000518 <display7SEG_1+0x318>)
 8000298:	f001 fe93 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2104      	movs	r1, #4
 80002a0:	489d      	ldr	r0, [pc, #628]	; (8000518 <display7SEG_1+0x318>)
 80002a2:	f001 fe8e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2108      	movs	r1, #8
 80002aa:	489b      	ldr	r0, [pc, #620]	; (8000518 <display7SEG_1+0x318>)
 80002ac:	f001 fe89 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2110      	movs	r1, #16
 80002b4:	4898      	ldr	r0, [pc, #608]	; (8000518 <display7SEG_1+0x318>)
 80002b6:	f001 fe84 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2120      	movs	r1, #32
 80002be:	4896      	ldr	r0, [pc, #600]	; (8000518 <display7SEG_1+0x318>)
 80002c0:	f001 fe7f 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2140      	movs	r1, #64	; 0x40
 80002c8:	4893      	ldr	r0, [pc, #588]	; (8000518 <display7SEG_1+0x318>)
 80002ca:	f001 fe7a 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80002ce:	e11f      	b.n	8000510 <display7SEG_1+0x310>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2101      	movs	r1, #1
 80002d4:	4890      	ldr	r0, [pc, #576]	; (8000518 <display7SEG_1+0x318>)
 80002d6:	f001 fe74 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2102      	movs	r1, #2
 80002de:	488e      	ldr	r0, [pc, #568]	; (8000518 <display7SEG_1+0x318>)
 80002e0:	f001 fe6f 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2104      	movs	r1, #4
 80002e8:	488b      	ldr	r0, [pc, #556]	; (8000518 <display7SEG_1+0x318>)
 80002ea:	f001 fe6a 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2108      	movs	r1, #8
 80002f2:	4889      	ldr	r0, [pc, #548]	; (8000518 <display7SEG_1+0x318>)
 80002f4:	f001 fe65 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2110      	movs	r1, #16
 80002fc:	4886      	ldr	r0, [pc, #536]	; (8000518 <display7SEG_1+0x318>)
 80002fe:	f001 fe60 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2120      	movs	r1, #32
 8000306:	4884      	ldr	r0, [pc, #528]	; (8000518 <display7SEG_1+0x318>)
 8000308:	f001 fe5b 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	4881      	ldr	r0, [pc, #516]	; (8000518 <display7SEG_1+0x318>)
 8000312:	f001 fe56 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000316:	e0fb      	b.n	8000510 <display7SEG_1+0x310>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	487e      	ldr	r0, [pc, #504]	; (8000518 <display7SEG_1+0x318>)
 800031e:	f001 fe50 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2102      	movs	r1, #2
 8000326:	487c      	ldr	r0, [pc, #496]	; (8000518 <display7SEG_1+0x318>)
 8000328:	f001 fe4b 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	4879      	ldr	r0, [pc, #484]	; (8000518 <display7SEG_1+0x318>)
 8000332:	f001 fe46 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4877      	ldr	r0, [pc, #476]	; (8000518 <display7SEG_1+0x318>)
 800033c:	f001 fe41 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	4874      	ldr	r0, [pc, #464]	; (8000518 <display7SEG_1+0x318>)
 8000346:	f001 fe3c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2120      	movs	r1, #32
 800034e:	4872      	ldr	r0, [pc, #456]	; (8000518 <display7SEG_1+0x318>)
 8000350:	f001 fe37 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	486f      	ldr	r0, [pc, #444]	; (8000518 <display7SEG_1+0x318>)
 800035a:	f001 fe32 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 800035e:	e0d7      	b.n	8000510 <display7SEG_1+0x310>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2101      	movs	r1, #1
 8000364:	486c      	ldr	r0, [pc, #432]	; (8000518 <display7SEG_1+0x318>)
 8000366:	f001 fe2c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	486a      	ldr	r0, [pc, #424]	; (8000518 <display7SEG_1+0x318>)
 8000370:	f001 fe27 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2104      	movs	r1, #4
 8000378:	4867      	ldr	r0, [pc, #412]	; (8000518 <display7SEG_1+0x318>)
 800037a:	f001 fe22 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2108      	movs	r1, #8
 8000382:	4865      	ldr	r0, [pc, #404]	; (8000518 <display7SEG_1+0x318>)
 8000384:	f001 fe1d 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4862      	ldr	r0, [pc, #392]	; (8000518 <display7SEG_1+0x318>)
 800038e:	f001 fe18 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	4860      	ldr	r0, [pc, #384]	; (8000518 <display7SEG_1+0x318>)
 8000398:	f001 fe13 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	485d      	ldr	r0, [pc, #372]	; (8000518 <display7SEG_1+0x318>)
 80003a2:	f001 fe0e 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80003a6:	e0b3      	b.n	8000510 <display7SEG_1+0x310>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2101      	movs	r1, #1
 80003ac:	485a      	ldr	r0, [pc, #360]	; (8000518 <display7SEG_1+0x318>)
 80003ae:	f001 fe08 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2102      	movs	r1, #2
 80003b6:	4858      	ldr	r0, [pc, #352]	; (8000518 <display7SEG_1+0x318>)
 80003b8:	f001 fe03 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2104      	movs	r1, #4
 80003c0:	4855      	ldr	r0, [pc, #340]	; (8000518 <display7SEG_1+0x318>)
 80003c2:	f001 fdfe 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2108      	movs	r1, #8
 80003ca:	4853      	ldr	r0, [pc, #332]	; (8000518 <display7SEG_1+0x318>)
 80003cc:	f001 fdf9 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2110      	movs	r1, #16
 80003d4:	4850      	ldr	r0, [pc, #320]	; (8000518 <display7SEG_1+0x318>)
 80003d6:	f001 fdf4 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	484e      	ldr	r0, [pc, #312]	; (8000518 <display7SEG_1+0x318>)
 80003e0:	f001 fdef 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2140      	movs	r1, #64	; 0x40
 80003e8:	484b      	ldr	r0, [pc, #300]	; (8000518 <display7SEG_1+0x318>)
 80003ea:	f001 fdea 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80003ee:	e08f      	b.n	8000510 <display7SEG_1+0x310>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	4848      	ldr	r0, [pc, #288]	; (8000518 <display7SEG_1+0x318>)
 80003f6:	f001 fde4 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2102      	movs	r1, #2
 80003fe:	4846      	ldr	r0, [pc, #280]	; (8000518 <display7SEG_1+0x318>)
 8000400:	f001 fddf 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	4843      	ldr	r0, [pc, #268]	; (8000518 <display7SEG_1+0x318>)
 800040a:	f001 fdda 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	4841      	ldr	r0, [pc, #260]	; (8000518 <display7SEG_1+0x318>)
 8000414:	f001 fdd5 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2110      	movs	r1, #16
 800041c:	483e      	ldr	r0, [pc, #248]	; (8000518 <display7SEG_1+0x318>)
 800041e:	f001 fdd0 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2120      	movs	r1, #32
 8000426:	483c      	ldr	r0, [pc, #240]	; (8000518 <display7SEG_1+0x318>)
 8000428:	f001 fdcb 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4839      	ldr	r0, [pc, #228]	; (8000518 <display7SEG_1+0x318>)
 8000432:	f001 fdc6 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000436:	e06b      	b.n	8000510 <display7SEG_1+0x310>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	4836      	ldr	r0, [pc, #216]	; (8000518 <display7SEG_1+0x318>)
 800043e:	f001 fdc0 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2102      	movs	r1, #2
 8000446:	4834      	ldr	r0, [pc, #208]	; (8000518 <display7SEG_1+0x318>)
 8000448:	f001 fdbb 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2104      	movs	r1, #4
 8000450:	4831      	ldr	r0, [pc, #196]	; (8000518 <display7SEG_1+0x318>)
 8000452:	f001 fdb6 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2108      	movs	r1, #8
 800045a:	482f      	ldr	r0, [pc, #188]	; (8000518 <display7SEG_1+0x318>)
 800045c:	f001 fdb1 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2110      	movs	r1, #16
 8000464:	482c      	ldr	r0, [pc, #176]	; (8000518 <display7SEG_1+0x318>)
 8000466:	f001 fdac 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2120      	movs	r1, #32
 800046e:	482a      	ldr	r0, [pc, #168]	; (8000518 <display7SEG_1+0x318>)
 8000470:	f001 fda7 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4827      	ldr	r0, [pc, #156]	; (8000518 <display7SEG_1+0x318>)
 800047a:	f001 fda2 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 800047e:	e047      	b.n	8000510 <display7SEG_1+0x310>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2101      	movs	r1, #1
 8000484:	4824      	ldr	r0, [pc, #144]	; (8000518 <display7SEG_1+0x318>)
 8000486:	f001 fd9c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	4822      	ldr	r0, [pc, #136]	; (8000518 <display7SEG_1+0x318>)
 8000490:	f001 fd97 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	481f      	ldr	r0, [pc, #124]	; (8000518 <display7SEG_1+0x318>)
 800049a:	f001 fd92 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2108      	movs	r1, #8
 80004a2:	481d      	ldr	r0, [pc, #116]	; (8000518 <display7SEG_1+0x318>)
 80004a4:	f001 fd8d 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2110      	movs	r1, #16
 80004ac:	481a      	ldr	r0, [pc, #104]	; (8000518 <display7SEG_1+0x318>)
 80004ae:	f001 fd88 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	4818      	ldr	r0, [pc, #96]	; (8000518 <display7SEG_1+0x318>)
 80004b8:	f001 fd83 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4815      	ldr	r0, [pc, #84]	; (8000518 <display7SEG_1+0x318>)
 80004c2:	f001 fd7e 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80004c6:	e023      	b.n	8000510 <display7SEG_1+0x310>
	case 9:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4812      	ldr	r0, [pc, #72]	; (8000518 <display7SEG_1+0x318>)
 80004ce:	f001 fd78 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2102      	movs	r1, #2
 80004d6:	4810      	ldr	r0, [pc, #64]	; (8000518 <display7SEG_1+0x318>)
 80004d8:	f001 fd73 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <display7SEG_1+0x318>)
 80004e2:	f001 fd6e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <display7SEG_1+0x318>)
 80004ec:	f001 fd69 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <display7SEG_1+0x318>)
 80004f6:	f001 fd64 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <display7SEG_1+0x318>)
 8000500:	f001 fd5f 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <display7SEG_1+0x318>)
 800050a:	f001 fd5a 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 800050e:	bf00      	nop
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010c00 	.word	0x40010c00

0800051c <display7SEG_2>:
void display7SEG_2(int num){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b09      	cmp	r3, #9
 8000528:	f200 81bc 	bhi.w	80008a4 <display7SEG_2+0x388>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <display7SEG_2+0x18>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	0800055d 	.word	0x0800055d
 8000538:	080005b1 	.word	0x080005b1
 800053c:	08000605 	.word	0x08000605
 8000540:	08000659 	.word	0x08000659
 8000544:	080006ad 	.word	0x080006ad
 8000548:	08000701 	.word	0x08000701
 800054c:	08000755 	.word	0x08000755
 8000550:	080007a9 	.word	0x080007a9
 8000554:	080007fd 	.word	0x080007fd
 8000558:	08000851 	.word	0x08000851
	switch(num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	48d2      	ldr	r0, [pc, #840]	; (80008ac <display7SEG_2+0x390>)
 8000562:	f001 fd2e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	48cf      	ldr	r0, [pc, #828]	; (80008ac <display7SEG_2+0x390>)
 800056e:	f001 fd28 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000578:	48cc      	ldr	r0, [pc, #816]	; (80008ac <display7SEG_2+0x390>)
 800057a:	f001 fd22 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000584:	48c9      	ldr	r0, [pc, #804]	; (80008ac <display7SEG_2+0x390>)
 8000586:	f001 fd1c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	48c6      	ldr	r0, [pc, #792]	; (80008ac <display7SEG_2+0x390>)
 8000592:	f001 fd16 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	48c3      	ldr	r0, [pc, #780]	; (80008ac <display7SEG_2+0x390>)
 800059e:	f001 fd10 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	48c0      	ldr	r0, [pc, #768]	; (80008ac <display7SEG_2+0x390>)
 80005aa:	f001 fd0a 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80005ae:	e179      	b.n	80008a4 <display7SEG_2+0x388>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	48bd      	ldr	r0, [pc, #756]	; (80008ac <display7SEG_2+0x390>)
 80005b6:	f001 fd04 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c0:	48ba      	ldr	r0, [pc, #744]	; (80008ac <display7SEG_2+0x390>)
 80005c2:	f001 fcfe 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005cc:	48b7      	ldr	r0, [pc, #732]	; (80008ac <display7SEG_2+0x390>)
 80005ce:	f001 fcf8 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	48b4      	ldr	r0, [pc, #720]	; (80008ac <display7SEG_2+0x390>)
 80005da:	f001 fcf2 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48b1      	ldr	r0, [pc, #708]	; (80008ac <display7SEG_2+0x390>)
 80005e6:	f001 fcec 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	48ae      	ldr	r0, [pc, #696]	; (80008ac <display7SEG_2+0x390>)
 80005f2:	f001 fce6 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fc:	48ab      	ldr	r0, [pc, #684]	; (80008ac <display7SEG_2+0x390>)
 80005fe:	f001 fce0 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000602:	e14f      	b.n	80008a4 <display7SEG_2+0x388>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	48a8      	ldr	r0, [pc, #672]	; (80008ac <display7SEG_2+0x390>)
 800060a:	f001 fcda 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	48a5      	ldr	r0, [pc, #660]	; (80008ac <display7SEG_2+0x390>)
 8000616:	f001 fcd4 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	48a2      	ldr	r0, [pc, #648]	; (80008ac <display7SEG_2+0x390>)
 8000622:	f001 fcce 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	489f      	ldr	r0, [pc, #636]	; (80008ac <display7SEG_2+0x390>)
 800062e:	f001 fcc8 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	489c      	ldr	r0, [pc, #624]	; (80008ac <display7SEG_2+0x390>)
 800063a:	f001 fcc2 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4899      	ldr	r0, [pc, #612]	; (80008ac <display7SEG_2+0x390>)
 8000646:	f001 fcbc 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	4896      	ldr	r0, [pc, #600]	; (80008ac <display7SEG_2+0x390>)
 8000652:	f001 fcb6 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000656:	e125      	b.n	80008a4 <display7SEG_2+0x388>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	4893      	ldr	r0, [pc, #588]	; (80008ac <display7SEG_2+0x390>)
 800065e:	f001 fcb0 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	4890      	ldr	r0, [pc, #576]	; (80008ac <display7SEG_2+0x390>)
 800066a:	f001 fcaa 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000674:	488d      	ldr	r0, [pc, #564]	; (80008ac <display7SEG_2+0x390>)
 8000676:	f001 fca4 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000680:	488a      	ldr	r0, [pc, #552]	; (80008ac <display7SEG_2+0x390>)
 8000682:	f001 fc9e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068c:	4887      	ldr	r0, [pc, #540]	; (80008ac <display7SEG_2+0x390>)
 800068e:	f001 fc98 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	4884      	ldr	r0, [pc, #528]	; (80008ac <display7SEG_2+0x390>)
 800069a:	f001 fc92 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a4:	4881      	ldr	r0, [pc, #516]	; (80008ac <display7SEG_2+0x390>)
 80006a6:	f001 fc8c 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80006aa:	e0fb      	b.n	80008a4 <display7SEG_2+0x388>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	487e      	ldr	r0, [pc, #504]	; (80008ac <display7SEG_2+0x390>)
 80006b2:	f001 fc86 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	487b      	ldr	r0, [pc, #492]	; (80008ac <display7SEG_2+0x390>)
 80006be:	f001 fc80 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4878      	ldr	r0, [pc, #480]	; (80008ac <display7SEG_2+0x390>)
 80006ca:	f001 fc7a 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	4875      	ldr	r0, [pc, #468]	; (80008ac <display7SEG_2+0x390>)
 80006d6:	f001 fc74 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4872      	ldr	r0, [pc, #456]	; (80008ac <display7SEG_2+0x390>)
 80006e2:	f001 fc6e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	486f      	ldr	r0, [pc, #444]	; (80008ac <display7SEG_2+0x390>)
 80006ee:	f001 fc68 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	486c      	ldr	r0, [pc, #432]	; (80008ac <display7SEG_2+0x390>)
 80006fa:	f001 fc62 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80006fe:	e0d1      	b.n	80008a4 <display7SEG_2+0x388>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4869      	ldr	r0, [pc, #420]	; (80008ac <display7SEG_2+0x390>)
 8000706:	f001 fc5c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	4866      	ldr	r0, [pc, #408]	; (80008ac <display7SEG_2+0x390>)
 8000712:	f001 fc56 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	4863      	ldr	r0, [pc, #396]	; (80008ac <display7SEG_2+0x390>)
 800071e:	f001 fc50 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4860      	ldr	r0, [pc, #384]	; (80008ac <display7SEG_2+0x390>)
 800072a:	f001 fc4a 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	485d      	ldr	r0, [pc, #372]	; (80008ac <display7SEG_2+0x390>)
 8000736:	f001 fc44 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	485a      	ldr	r0, [pc, #360]	; (80008ac <display7SEG_2+0x390>)
 8000742:	f001 fc3e 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	4857      	ldr	r0, [pc, #348]	; (80008ac <display7SEG_2+0x390>)
 800074e:	f001 fc38 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000752:	e0a7      	b.n	80008a4 <display7SEG_2+0x388>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4854      	ldr	r0, [pc, #336]	; (80008ac <display7SEG_2+0x390>)
 800075a:	f001 fc32 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4851      	ldr	r0, [pc, #324]	; (80008ac <display7SEG_2+0x390>)
 8000766:	f001 fc2c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	484e      	ldr	r0, [pc, #312]	; (80008ac <display7SEG_2+0x390>)
 8000772:	f001 fc26 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	484b      	ldr	r0, [pc, #300]	; (80008ac <display7SEG_2+0x390>)
 800077e:	f001 fc20 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	4848      	ldr	r0, [pc, #288]	; (80008ac <display7SEG_2+0x390>)
 800078a:	f001 fc1a 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4845      	ldr	r0, [pc, #276]	; (80008ac <display7SEG_2+0x390>)
 8000796:	f001 fc14 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a0:	4842      	ldr	r0, [pc, #264]	; (80008ac <display7SEG_2+0x390>)
 80007a2:	f001 fc0e 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80007a6:	e07d      	b.n	80008a4 <display7SEG_2+0x388>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	483f      	ldr	r0, [pc, #252]	; (80008ac <display7SEG_2+0x390>)
 80007ae:	f001 fc08 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b8:	483c      	ldr	r0, [pc, #240]	; (80008ac <display7SEG_2+0x390>)
 80007ba:	f001 fc02 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	4839      	ldr	r0, [pc, #228]	; (80008ac <display7SEG_2+0x390>)
 80007c6:	f001 fbfc 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <display7SEG_2+0x390>)
 80007d2:	f001 fbf6 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007dc:	4833      	ldr	r0, [pc, #204]	; (80008ac <display7SEG_2+0x390>)
 80007de:	f001 fbf0 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	4830      	ldr	r0, [pc, #192]	; (80008ac <display7SEG_2+0x390>)
 80007ea:	f001 fbea 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	482d      	ldr	r0, [pc, #180]	; (80008ac <display7SEG_2+0x390>)
 80007f6:	f001 fbe4 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80007fa:	e053      	b.n	80008a4 <display7SEG_2+0x388>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <display7SEG_2+0x390>)
 8000802:	f001 fbde 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080c:	4827      	ldr	r0, [pc, #156]	; (80008ac <display7SEG_2+0x390>)
 800080e:	f001 fbd8 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <display7SEG_2+0x390>)
 800081a:	f001 fbd2 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <display7SEG_2+0x390>)
 8000826:	f001 fbcc 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <display7SEG_2+0x390>)
 8000832:	f001 fbc6 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	481b      	ldr	r0, [pc, #108]	; (80008ac <display7SEG_2+0x390>)
 800083e:	f001 fbc0 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <display7SEG_2+0x390>)
 800084a:	f001 fbba 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 800084e:	e029      	b.n	80008a4 <display7SEG_2+0x388>
	case 9:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	4815      	ldr	r0, [pc, #84]	; (80008ac <display7SEG_2+0x390>)
 8000856:	f001 fbb4 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <display7SEG_2+0x390>)
 8000862:	f001 fbae 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	480f      	ldr	r0, [pc, #60]	; (80008ac <display7SEG_2+0x390>)
 800086e:	f001 fba8 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <display7SEG_2+0x390>)
 800087a:	f001 fba2 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <display7SEG_2+0x390>)
 8000886:	f001 fb9c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <display7SEG_2+0x390>)
 8000892:	f001 fb96 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <display7SEG_2+0x390>)
 800089e:	f001 fb90 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80008a2:	bf00      	nop
	}
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <display_7segled>:



void display_7segled(int num){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	switch(num){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <display_7segled+0x16>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d019      	beq.n	80008f8 <display_7segled+0x48>
 80008c4:	e031      	b.n	800092a <display_7segled+0x7a>
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008cc:	4820      	ldr	r0, [pc, #128]	; (8000950 <display_7segled+0xa0>)
 80008ce:	f001 fb78 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <display_7segled+0xa0>)
 80008da:	f001 fb72 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <display_7segled+0xa0>)
 80008e6:	f001 fb6c 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f0:	4817      	ldr	r0, [pc, #92]	; (8000950 <display_7segled+0xa0>)
 80008f2:	f001 fb66 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 80008f6:	e018      	b.n	800092a <display_7segled+0x7a>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <display_7segled+0xa0>)
 8000900:	f001 fb5f 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <display_7segled+0xa0>)
 800090c:	f001 fb59 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <display_7segled+0xa0>)
 8000918:	f001 fb53 	bl	8001fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <display_7segled+0xa0>)
 8000924:	f001 fb4d 	bl	8001fc2 <HAL_GPIO_WritePin>
		break;
 8000928:	bf00      	nop
	}
	display7SEG_1(led_buffer[num]);
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <display_7segled+0xa4>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc64 	bl	8000200 <display7SEG_1>
	display7SEG_2(led_buffer[num+2]);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3302      	adds	r3, #2
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <display_7segled+0xa4>)
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fdea 	bl	800051c <display7SEG_2>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40010800 	.word	0x40010800
 8000954:	200000c0 	.word	0x200000c0

08000958 <off_all_led>:
 *      Author: hoang
 */

#include "LED_traffic.h"

void off_all_led(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2102      	movs	r1, #2
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <off_all_led+0x44>)
 8000962:	f001 fb2e 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2104      	movs	r1, #4
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <off_all_led+0x44>)
 800096c:	f001 fb29 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2108      	movs	r1, #8
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <off_all_led+0x44>)
 8000976:	f001 fb24 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2110      	movs	r1, #16
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <off_all_led+0x44>)
 8000980:	f001 fb1f 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <off_all_led+0x44>)
 800098a:	f001 fb1a 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <off_all_led+0x44>)
 8000994:	f001 fb15 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40010800 	.word	0x40010800

080009a0 <on_red_1>:

void on_red_1(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <on_red_1+0x28>)
 80009aa:	f001 fb0a 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <on_red_1+0x28>)
 80009b4:	f001 fb05 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2108      	movs	r1, #8
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <on_red_1+0x28>)
 80009be:	f001 fb00 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800

080009cc <on_amber_1>:
void on_amber_1(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2102      	movs	r1, #2
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <on_amber_1+0x28>)
 80009d6:	f001 faf4 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2104      	movs	r1, #4
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <on_amber_1+0x28>)
 80009e0:	f001 faef 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2108      	movs	r1, #8
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <on_amber_1+0x28>)
 80009ea:	f001 faea 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010800 	.word	0x40010800

080009f8 <on_green_1>:
void on_green_1(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <on_green_1+0x28>)
 8000a02:	f001 fade 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <on_green_1+0x28>)
 8000a0c:	f001 fad9 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2108      	movs	r1, #8
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <on_green_1+0x28>)
 8000a16:	f001 fad4 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010800 	.word	0x40010800

08000a24 <on_red_2>:

void on_red_2(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <on_red_2+0x28>)
 8000a2e:	f001 fac8 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <on_red_2+0x28>)
 8000a38:	f001 fac3 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <on_red_2+0x28>)
 8000a42:	f001 fabe 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800

08000a50 <on_amber_2>:
void on_amber_2(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <on_amber_2+0x28>)
 8000a5a:	f001 fab2 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2120      	movs	r1, #32
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <on_amber_2+0x28>)
 8000a64:	f001 faad 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <on_amber_2+0x28>)
 8000a6e:	f001 faa8 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010800 	.word	0x40010800

08000a7c <on_green_2>:
void on_green_2(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2110      	movs	r1, #16
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <on_green_2+0x28>)
 8000a86:	f001 fa9c 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <on_green_2+0x28>)
 8000a90:	f001 fa97 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <on_green_2+0x28>)
 8000a9a:	f001 fa92 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <toggle_led_red>:

void toggle_led_red(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2102      	movs	r1, #2
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <toggle_led_red+0x40>)
 8000ab2:	f001 fa86 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <toggle_led_red+0x40>)
 8000aba:	f001 fa9a 	bl	8001ff2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <toggle_led_red+0x40>)
 8000ac4:	f001 fa7d 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <toggle_led_red+0x40>)
 8000ace:	f001 fa78 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <toggle_led_red+0x40>)
 8000ad6:	f001 fa8c 	bl	8001ff2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <toggle_led_red+0x40>)
 8000ae0:	f001 fa6f 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010800 	.word	0x40010800

08000aec <toggle_led_amber>:
void toggle_led_amber(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2102      	movs	r1, #2
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <toggle_led_amber+0x40>)
 8000af6:	f001 fa64 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2104      	movs	r1, #4
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <toggle_led_amber+0x40>)
 8000b00:	f001 fa5f 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000b04:	2108      	movs	r1, #8
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <toggle_led_amber+0x40>)
 8000b08:	f001 fa73 	bl	8001ff2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <toggle_led_amber+0x40>)
 8000b12:	f001 fa56 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <toggle_led_amber+0x40>)
 8000b1c:	f001 fa51 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4802      	ldr	r0, [pc, #8]	; (8000b2c <toggle_led_amber+0x40>)
 8000b24:	f001 fa65 	bl	8001ff2 <HAL_GPIO_TogglePin>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40010800 	.word	0x40010800

08000b30 <toggle_led_green>:
void toggle_led_green(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000b34:	2102      	movs	r1, #2
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <toggle_led_green+0x40>)
 8000b38:	f001 fa5b 	bl	8001ff2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2104      	movs	r1, #4
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <toggle_led_green+0x40>)
 8000b42:	f001 fa3e 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <toggle_led_green+0x40>)
 8000b4c:	f001 fa39 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000b50:	2110      	movs	r1, #16
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <toggle_led_green+0x40>)
 8000b54:	f001 fa4d 	bl	8001ff2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <toggle_led_green+0x40>)
 8000b5e:	f001 fa30 	bl	8001fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <toggle_led_green+0x40>)
 8000b68:	f001 fa2b 	bl	8001fc2 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800

08000b74 <handle_FSM>:
	MAN_GREEN,
	CHECK_STATE
};
enum State current_state = INIT;

void handle_FSM(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	switch(current_state){
 8000b78:	4b9a      	ldr	r3, [pc, #616]	; (8000de4 <handle_FSM+0x270>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	f200 83d8 	bhi.w	8001332 <handle_FSM+0x7be>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <handle_FSM+0x14>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bf9 	.word	0x08000bf9
 8000b90:	08000ce7 	.word	0x08000ce7
 8000b94:	08000e19 	.word	0x08000e19
 8000b98:	08000f07 	.word	0x08000f07
 8000b9c:	08001039 	.word	0x08001039
 8000ba0:	08001105 	.word	0x08001105
 8000ba4:	080011d1 	.word	0x080011d1
 8000ba8:	080012a9 	.word	0x080012a9
	case INIT:
		off_all_led();
 8000bac:	f7ff fed4 	bl	8000958 <off_all_led>
		off_all_7seg();
 8000bb0:	f7ff facc 	bl	800014c <off_all_7seg>
		current_state = RED_GREEN;
 8000bb4:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <handle_FSM+0x270>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		display_7seg_road_1 = red_time;
 8000bba:	4b8b      	ldr	r3, [pc, #556]	; (8000de8 <handle_FSM+0x274>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a8b      	ldr	r2, [pc, #556]	; (8000dec <handle_FSM+0x278>)
 8000bc0:	6013      	str	r3, [r2, #0]
		display_7seg_road_2 = green_time;
 8000bc2:	4b8b      	ldr	r3, [pc, #556]	; (8000df0 <handle_FSM+0x27c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a8b      	ldr	r2, [pc, #556]	; (8000df4 <handle_FSM+0x280>)
 8000bc8:	6013      	str	r3, [r2, #0]
		setTimer_transfer(green_time*100);
 8000bca:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <handle_FSM+0x27c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2264      	movs	r2, #100	; 0x64
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fd99 	bl	800170c <setTimer_transfer>
		setTimer_down(100);
 8000bda:	2064      	movs	r0, #100	; 0x64
 8000bdc:	f000 fdaa 	bl	8001734 <setTimer_down>
		setTimer_display_7seg(50);
 8000be0:	2032      	movs	r0, #50	; 0x32
 8000be2:	f000 fdbb 	bl	800175c <setTimer_display_7seg>
		update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000be6:	4b81      	ldr	r3, [pc, #516]	; (8000dec <handle_FSM+0x278>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a82      	ldr	r2, [pc, #520]	; (8000df4 <handle_FSM+0x280>)
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fac9 	bl	8000188 <update_buffer_7seg>
		break;
 8000bf6:	e39c      	b.n	8001332 <handle_FSM+0x7be>
	case RED_GREEN:
		on_red_1();
 8000bf8:	f7ff fed2 	bl	80009a0 <on_red_1>
		on_green_2();
 8000bfc:	f7ff ff3e 	bl	8000a7c <on_green_2>
		display_7segled(index_7seg_led);
 8000c00:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <handle_FSM+0x284>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe53 	bl	80008b0 <display_7segled>
		if(transfer_flag){
 8000c0a:	4b7c      	ldr	r3, [pc, #496]	; (8000dfc <handle_FSM+0x288>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <handle_FSM+0xb4>
			setTimer_transfer(amber_time*100);
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <handle_FSM+0x28c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2264      	movs	r2, #100	; 0x64
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fd75 	bl	800170c <setTimer_transfer>
			current_state = RED_AMBER;
 8000c22:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <handle_FSM+0x270>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	701a      	strb	r2, [r3, #0]
		}
		if(down_flag){
 8000c28:	4b76      	ldr	r3, [pc, #472]	; (8000e04 <handle_FSM+0x290>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d01c      	beq.n	8000c6a <handle_FSM+0xf6>
			setTimer_down(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f000 fd7f 	bl	8001734 <setTimer_down>
			display_7seg_road_1--;
 8000c36:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <handle_FSM+0x278>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a6b      	ldr	r2, [pc, #428]	; (8000dec <handle_FSM+0x278>)
 8000c3e:	6013      	str	r3, [r2, #0]
			display_7seg_road_2--;
 8000c40:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <handle_FSM+0x280>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	4a6b      	ldr	r2, [pc, #428]	; (8000df4 <handle_FSM+0x280>)
 8000c48:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_2 <= 0) display_7seg_road_2 = amber_time;
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <handle_FSM+0x280>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dc03      	bgt.n	8000c5a <handle_FSM+0xe6>
 8000c52:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <handle_FSM+0x28c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a67      	ldr	r2, [pc, #412]	; (8000df4 <handle_FSM+0x280>)
 8000c58:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000c5a:	4b64      	ldr	r3, [pc, #400]	; (8000dec <handle_FSM+0x278>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a65      	ldr	r2, [pc, #404]	; (8000df4 <handle_FSM+0x280>)
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fa8f 	bl	8000188 <update_buffer_7seg>
		}
		if(display_7seg_flag){
 8000c6a:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <handle_FSM+0x294>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d010      	beq.n	8000c94 <handle_FSM+0x120>
			setTimer_display_7seg(50);
 8000c72:	2032      	movs	r0, #50	; 0x32
 8000c74:	f000 fd72 	bl	800175c <setTimer_display_7seg>
			index_7seg_led++;
 8000c78:	4b5f      	ldr	r3, [pc, #380]	; (8000df8 <handle_FSM+0x284>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a5e      	ldr	r2, [pc, #376]	; (8000df8 <handle_FSM+0x284>)
 8000c80:	6013      	str	r3, [r2, #0]
			index_7seg_led %= 2;
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <handle_FSM+0x284>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	4a59      	ldr	r2, [pc, #356]	; (8000df8 <handle_FSM+0x284>)
 8000c92:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fb5b 	bl	8001350 <is_button_pressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 833b 	beq.w	8001318 <handle_FSM+0x7a4>
			current_state = MAN_RED;
 8000ca2:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <handle_FSM+0x270>)
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	701a      	strb	r2, [r3, #0]
			green_time_increase = green_time;
 8000ca8:	4b51      	ldr	r3, [pc, #324]	; (8000df0 <handle_FSM+0x27c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <handle_FSM+0x298>)
 8000cae:	6013      	str	r3, [r2, #0]
			red_time_increase = red_time;
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <handle_FSM+0x274>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a56      	ldr	r2, [pc, #344]	; (8000e10 <handle_FSM+0x29c>)
 8000cb6:	6013      	str	r3, [r2, #0]
			amber_time_increase = amber_time;
 8000cb8:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <handle_FSM+0x28c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <handle_FSM+0x2a0>)
 8000cbe:	6013      	str	r3, [r2, #0]
			display_7seg_road_1 = 2;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <handle_FSM+0x278>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = red_time;
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <handle_FSM+0x274>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a4a      	ldr	r2, [pc, #296]	; (8000df4 <handle_FSM+0x280>)
 8000ccc:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <handle_FSM+0x278>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <handle_FSM+0x280>)
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa55 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 8000cde:	2019      	movs	r0, #25
 8000ce0:	f000 fd50 	bl	8001784 <setTimer_led_man>
		}
		break;
 8000ce4:	e318      	b.n	8001318 <handle_FSM+0x7a4>
	case RED_AMBER:
		on_red_1();
 8000ce6:	f7ff fe5b 	bl	80009a0 <on_red_1>
		on_amber_2();
 8000cea:	f7ff feb1 	bl	8000a50 <on_amber_2>
		display_7segled(index_7seg_led);
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <handle_FSM+0x284>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fddc 	bl	80008b0 <display_7segled>

		if(transfer_flag){
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <handle_FSM+0x288>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00a      	beq.n	8000d16 <handle_FSM+0x1a2>
			setTimer_transfer(green_time*100);
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <handle_FSM+0x27c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2264      	movs	r2, #100	; 0x64
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fcfe 	bl	800170c <setTimer_transfer>
			current_state = GREEN_RED;
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <handle_FSM+0x270>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
		}
		if(down_flag){
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <handle_FSM+0x290>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d024      	beq.n	8000d68 <handle_FSM+0x1f4>
			setTimer_down(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f000 fd08 	bl	8001734 <setTimer_down>
			display_7seg_road_1--;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <handle_FSM+0x278>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <handle_FSM+0x278>)
 8000d2c:	6013      	str	r3, [r2, #0]
			display_7seg_road_2--;
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <handle_FSM+0x280>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <handle_FSM+0x280>)
 8000d36:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_1 <= 0) display_7seg_road_1 = green_time;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <handle_FSM+0x278>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dc03      	bgt.n	8000d48 <handle_FSM+0x1d4>
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <handle_FSM+0x27c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a29      	ldr	r2, [pc, #164]	; (8000dec <handle_FSM+0x278>)
 8000d46:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_2 <= 0) display_7seg_road_2 = red_time;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <handle_FSM+0x280>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc03      	bgt.n	8000d58 <handle_FSM+0x1e4>
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <handle_FSM+0x274>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <handle_FSM+0x280>)
 8000d56:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <handle_FSM+0x278>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <handle_FSM+0x280>)
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa10 	bl	8000188 <update_buffer_7seg>
		}
		if(display_7seg_flag){
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <handle_FSM+0x294>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d010      	beq.n	8000d92 <handle_FSM+0x21e>
			setTimer_display_7seg(50);
 8000d70:	2032      	movs	r0, #50	; 0x32
 8000d72:	f000 fcf3 	bl	800175c <setTimer_display_7seg>
			index_7seg_led++;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <handle_FSM+0x284>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <handle_FSM+0x284>)
 8000d7e:	6013      	str	r3, [r2, #0]
			index_7seg_led %= 2;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <handle_FSM+0x284>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	bfb8      	it	lt
 8000d8c:	425b      	neglt	r3, r3
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <handle_FSM+0x284>)
 8000d90:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 fadc 	bl	8001350 <is_button_pressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 82be 	beq.w	800131c <handle_FSM+0x7a8>
			current_state = MAN_RED;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <handle_FSM+0x270>)
 8000da2:	2205      	movs	r2, #5
 8000da4:	701a      	strb	r2, [r3, #0]
			green_time_increase = green_time;
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <handle_FSM+0x27c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <handle_FSM+0x298>)
 8000dac:	6013      	str	r3, [r2, #0]
			red_time_increase = red_time;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <handle_FSM+0x274>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <handle_FSM+0x29c>)
 8000db4:	6013      	str	r3, [r2, #0]
			amber_time_increase = amber_time;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <handle_FSM+0x28c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <handle_FSM+0x2a0>)
 8000dbc:	6013      	str	r3, [r2, #0]
			display_7seg_road_1 = 2;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <handle_FSM+0x278>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = red_time;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <handle_FSM+0x274>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <handle_FSM+0x280>)
 8000dca:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <handle_FSM+0x278>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <handle_FSM+0x280>)
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff f9d6 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 8000ddc:	2019      	movs	r0, #25
 8000dde:	f000 fcd1 	bl	8001784 <setTimer_led_man>
		}
		break;
 8000de2:	e29b      	b.n	800131c <handle_FSM+0x7a8>
 8000de4:	20000060 	.word	0x20000060
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000054 	.word	0x20000054
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000058 	.word	0x20000058
 8000df8:	2000005c 	.word	0x2000005c
 8000dfc:	200000a4 	.word	0x200000a4
 8000e00:	20000008 	.word	0x20000008
 8000e04:	200000ac 	.word	0x200000ac
 8000e08:	200000b4 	.word	0x200000b4
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000010 	.word	0x20000010
 8000e14:	20000014 	.word	0x20000014
	case GREEN_RED:
		on_green_1();
 8000e18:	f7ff fdee 	bl	80009f8 <on_green_1>
		on_red_2();
 8000e1c:	f7ff fe02 	bl	8000a24 <on_red_2>
		display_7segled(index_7seg_led);
 8000e20:	4b78      	ldr	r3, [pc, #480]	; (8001004 <handle_FSM+0x490>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fd43 	bl	80008b0 <display_7segled>

		if(transfer_flag){
 8000e2a:	4b77      	ldr	r3, [pc, #476]	; (8001008 <handle_FSM+0x494>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00a      	beq.n	8000e48 <handle_FSM+0x2d4>
			setTimer_transfer(amber_time*100);
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <handle_FSM+0x498>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2264      	movs	r2, #100	; 0x64
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fc65 	bl	800170c <setTimer_transfer>
			current_state = AMBER_RED;
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <handle_FSM+0x49c>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]
		}
		if(down_flag){
 8000e48:	4b72      	ldr	r3, [pc, #456]	; (8001014 <handle_FSM+0x4a0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d01c      	beq.n	8000e8a <handle_FSM+0x316>
			setTimer_down(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f000 fc6f 	bl	8001734 <setTimer_down>
			display_7seg_road_1--;
 8000e56:	4b70      	ldr	r3, [pc, #448]	; (8001018 <handle_FSM+0x4a4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <handle_FSM+0x4a4>)
 8000e5e:	6013      	str	r3, [r2, #0]
			display_7seg_road_2--;
 8000e60:	4b6e      	ldr	r3, [pc, #440]	; (800101c <handle_FSM+0x4a8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	4a6d      	ldr	r2, [pc, #436]	; (800101c <handle_FSM+0x4a8>)
 8000e68:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_1 <= 0) display_7seg_road_1 = amber_time;
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <handle_FSM+0x4a4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dc03      	bgt.n	8000e7a <handle_FSM+0x306>
 8000e72:	4b66      	ldr	r3, [pc, #408]	; (800100c <handle_FSM+0x498>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a68      	ldr	r2, [pc, #416]	; (8001018 <handle_FSM+0x4a4>)
 8000e78:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <handle_FSM+0x4a4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a67      	ldr	r2, [pc, #412]	; (800101c <handle_FSM+0x4a8>)
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f97f 	bl	8000188 <update_buffer_7seg>
		}
		if(display_7seg_flag){
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <handle_FSM+0x4ac>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <handle_FSM+0x340>
			setTimer_display_7seg(50);
 8000e92:	2032      	movs	r0, #50	; 0x32
 8000e94:	f000 fc62 	bl	800175c <setTimer_display_7seg>
			index_7seg_led++;
 8000e98:	4b5a      	ldr	r3, [pc, #360]	; (8001004 <handle_FSM+0x490>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a59      	ldr	r2, [pc, #356]	; (8001004 <handle_FSM+0x490>)
 8000ea0:	6013      	str	r3, [r2, #0]
			index_7seg_led %= 2;
 8000ea2:	4b58      	ldr	r3, [pc, #352]	; (8001004 <handle_FSM+0x490>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	bfb8      	it	lt
 8000eae:	425b      	neglt	r3, r3
 8000eb0:	4a54      	ldr	r2, [pc, #336]	; (8001004 <handle_FSM+0x490>)
 8000eb2:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fa4b 	bl	8001350 <is_button_pressed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 822f 	beq.w	8001320 <handle_FSM+0x7ac>
			current_state = MAN_RED;
 8000ec2:	4b53      	ldr	r3, [pc, #332]	; (8001010 <handle_FSM+0x49c>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	701a      	strb	r2, [r3, #0]
			green_time_increase = green_time;
 8000ec8:	4b56      	ldr	r3, [pc, #344]	; (8001024 <handle_FSM+0x4b0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a56      	ldr	r2, [pc, #344]	; (8001028 <handle_FSM+0x4b4>)
 8000ece:	6013      	str	r3, [r2, #0]
			red_time_increase = red_time;
 8000ed0:	4b56      	ldr	r3, [pc, #344]	; (800102c <handle_FSM+0x4b8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <handle_FSM+0x4bc>)
 8000ed6:	6013      	str	r3, [r2, #0]
			amber_time_increase = amber_time;
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <handle_FSM+0x498>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a55      	ldr	r2, [pc, #340]	; (8001034 <handle_FSM+0x4c0>)
 8000ede:	6013      	str	r3, [r2, #0]
			display_7seg_road_1 = 2;
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <handle_FSM+0x4a4>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = red_time;
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <handle_FSM+0x4b8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <handle_FSM+0x4a8>)
 8000eec:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <handle_FSM+0x4a4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a4a      	ldr	r2, [pc, #296]	; (800101c <handle_FSM+0x4a8>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f945 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 8000efe:	2019      	movs	r0, #25
 8000f00:	f000 fc40 	bl	8001784 <setTimer_led_man>
		}
		break;
 8000f04:	e20c      	b.n	8001320 <handle_FSM+0x7ac>
	case AMBER_RED:
		on_amber_1();
 8000f06:	f7ff fd61 	bl	80009cc <on_amber_1>
		on_red_2();
 8000f0a:	f7ff fd8b 	bl	8000a24 <on_red_2>
		display_7segled(index_7seg_led);
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <handle_FSM+0x490>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fccc 	bl	80008b0 <display_7segled>
		if(transfer_flag){
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <handle_FSM+0x494>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00a      	beq.n	8000f36 <handle_FSM+0x3c2>
			setTimer_transfer(green_time*100);
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <handle_FSM+0x4b0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2264      	movs	r2, #100	; 0x64
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fbee 	bl	800170c <setTimer_transfer>
			current_state = RED_GREEN;
 8000f30:	4b37      	ldr	r3, [pc, #220]	; (8001010 <handle_FSM+0x49c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
		}
		if(down_flag){
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <handle_FSM+0x4a0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d024      	beq.n	8000f88 <handle_FSM+0x414>
			setTimer_down(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f000 fbf8 	bl	8001734 <setTimer_down>
			display_7seg_road_1--;
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <handle_FSM+0x4a4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <handle_FSM+0x4a4>)
 8000f4c:	6013      	str	r3, [r2, #0]
			display_7seg_road_2--;
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <handle_FSM+0x4a8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <handle_FSM+0x4a8>)
 8000f56:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_1 <= 0) display_7seg_road_1 = red_time;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <handle_FSM+0x4a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dc03      	bgt.n	8000f68 <handle_FSM+0x3f4>
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <handle_FSM+0x4b8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2c      	ldr	r2, [pc, #176]	; (8001018 <handle_FSM+0x4a4>)
 8000f66:	6013      	str	r3, [r2, #0]
			if(display_7seg_road_2 <= 0) display_7seg_road_2 = green_time;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <handle_FSM+0x4a8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dc03      	bgt.n	8000f78 <handle_FSM+0x404>
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <handle_FSM+0x4b0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <handle_FSM+0x4a8>)
 8000f76:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <handle_FSM+0x4a4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <handle_FSM+0x4a8>)
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f900 	bl	8000188 <update_buffer_7seg>
		}
		if(display_7seg_flag){
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <handle_FSM+0x4ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d010      	beq.n	8000fb2 <handle_FSM+0x43e>
			setTimer_display_7seg(50);
 8000f90:	2032      	movs	r0, #50	; 0x32
 8000f92:	f000 fbe3 	bl	800175c <setTimer_display_7seg>
			index_7seg_led++;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <handle_FSM+0x490>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <handle_FSM+0x490>)
 8000f9e:	6013      	str	r3, [r2, #0]
			index_7seg_led %= 2;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <handle_FSM+0x490>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	bfb8      	it	lt
 8000fac:	425b      	neglt	r3, r3
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <handle_FSM+0x490>)
 8000fb0:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f9cc 	bl	8001350 <is_button_pressed>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 81b2 	beq.w	8001324 <handle_FSM+0x7b0>
			current_state = MAN_RED;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <handle_FSM+0x49c>)
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	701a      	strb	r2, [r3, #0]
			green_time_increase = green_time;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <handle_FSM+0x4b0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <handle_FSM+0x4b4>)
 8000fcc:	6013      	str	r3, [r2, #0]
			red_time_increase = red_time;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <handle_FSM+0x4b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <handle_FSM+0x4bc>)
 8000fd4:	6013      	str	r3, [r2, #0]
			amber_time_increase = amber_time;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <handle_FSM+0x498>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <handle_FSM+0x4c0>)
 8000fdc:	6013      	str	r3, [r2, #0]
			display_7seg_road_1 = 2;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <handle_FSM+0x4a4>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = red_time;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <handle_FSM+0x4b8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <handle_FSM+0x4a8>)
 8000fea:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <handle_FSM+0x4a4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <handle_FSM+0x4a8>)
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f8c6 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 8000ffc:	2019      	movs	r0, #25
 8000ffe:	f000 fbc1 	bl	8001784 <setTimer_led_man>
		}
		break;
 8001002:	e18f      	b.n	8001324 <handle_FSM+0x7b0>
 8001004:	2000005c 	.word	0x2000005c
 8001008:	200000a4 	.word	0x200000a4
 800100c:	20000008 	.word	0x20000008
 8001010:	20000060 	.word	0x20000060
 8001014:	200000ac 	.word	0x200000ac
 8001018:	20000054 	.word	0x20000054
 800101c:	20000058 	.word	0x20000058
 8001020:	200000b4 	.word	0x200000b4
 8001024:	20000000 	.word	0x20000000
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000004 	.word	0x20000004
 8001030:	20000010 	.word	0x20000010
 8001034:	20000014 	.word	0x20000014
	case MAN_RED:
		if(led_man_flag){
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <handle_FSM+0x704>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <handle_FSM+0x4d6>
			setTimer_led_man(25);
 8001040:	2019      	movs	r0, #25
 8001042:	f000 fb9f 	bl	8001784 <setTimer_led_man>
			toggle_led_red();
 8001046:	f7ff fd2f 	bl	8000aa8 <toggle_led_red>
		}
		if(display_7seg_flag){
 800104a:	4b8c      	ldr	r3, [pc, #560]	; (800127c <handle_FSM+0x708>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d013      	beq.n	800107a <handle_FSM+0x506>
			setTimer_display_7seg(50);
 8001052:	2032      	movs	r0, #50	; 0x32
 8001054:	f000 fb82 	bl	800175c <setTimer_display_7seg>
			display_7segled(index_7seg_led++);
 8001058:	4b89      	ldr	r3, [pc, #548]	; (8001280 <handle_FSM+0x70c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	4988      	ldr	r1, [pc, #544]	; (8001280 <handle_FSM+0x70c>)
 8001060:	600a      	str	r2, [r1, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fc24 	bl	80008b0 <display_7segled>
			index_7seg_led %= 2;
 8001068:	4b85      	ldr	r3, [pc, #532]	; (8001280 <handle_FSM+0x70c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	bfb8      	it	lt
 8001074:	425b      	neglt	r3, r3
 8001076:	4a82      	ldr	r2, [pc, #520]	; (8001280 <handle_FSM+0x70c>)
 8001078:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f968 	bl	8001350 <is_button_pressed>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d014      	beq.n	80010b0 <handle_FSM+0x53c>
			current_state = MAN_AMBER;
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <handle_FSM+0x710>)
 8001088:	2206      	movs	r2, #6
 800108a:	701a      	strb	r2, [r3, #0]
			display_7seg_road_1 = 3;
 800108c:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <handle_FSM+0x714>)
 800108e:	2203      	movs	r2, #3
 8001090:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = amber_time;
 8001092:	4b7e      	ldr	r3, [pc, #504]	; (800128c <handle_FSM+0x718>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7e      	ldr	r2, [pc, #504]	; (8001290 <handle_FSM+0x71c>)
 8001098:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <handle_FSM+0x714>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7c      	ldr	r2, [pc, #496]	; (8001290 <handle_FSM+0x71c>)
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f86f 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 80010aa:	2019      	movs	r0, #25
 80010ac:	f000 fb6a 	bl	8001784 <setTimer_led_man>
		}
		if(is_button_pressed(1)){
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 f94d 	bl	8001350 <is_button_pressed>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d017      	beq.n	80010ec <handle_FSM+0x578>
			red_time_increase++;
 80010bc:	4b75      	ldr	r3, [pc, #468]	; (8001294 <handle_FSM+0x720>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <handle_FSM+0x720>)
 80010c4:	6013      	str	r3, [r2, #0]
			if(red_time_increase >= 100) red_time_increase = 1;
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <handle_FSM+0x720>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b63      	cmp	r3, #99	; 0x63
 80010cc:	dd02      	ble.n	80010d4 <handle_FSM+0x560>
 80010ce:	4b71      	ldr	r3, [pc, #452]	; (8001294 <handle_FSM+0x720>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = red_time_increase;
 80010d4:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <handle_FSM+0x720>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <handle_FSM+0x71c>)
 80010da:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <handle_FSM+0x714>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a6b      	ldr	r2, [pc, #428]	; (8001290 <handle_FSM+0x71c>)
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f84e 	bl	8000188 <update_buffer_7seg>
		}
		if(is_button_pressed(2)){
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 f92f 	bl	8001350 <is_button_pressed>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8117 	beq.w	8001328 <handle_FSM+0x7b4>
			red_time = red_time_increase;
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <handle_FSM+0x720>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a66      	ldr	r2, [pc, #408]	; (8001298 <handle_FSM+0x724>)
 8001100:	6013      	str	r3, [r2, #0]
		}
		break;
 8001102:	e111      	b.n	8001328 <handle_FSM+0x7b4>
	case MAN_AMBER:
		if(led_man_flag){
 8001104:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <handle_FSM+0x704>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <handle_FSM+0x5a2>
			setTimer_led_man(25);
 800110c:	2019      	movs	r0, #25
 800110e:	f000 fb39 	bl	8001784 <setTimer_led_man>
			toggle_led_amber();
 8001112:	f7ff fceb 	bl	8000aec <toggle_led_amber>
		}
		if(display_7seg_flag){
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <handle_FSM+0x708>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d013      	beq.n	8001146 <handle_FSM+0x5d2>
			setTimer_display_7seg(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f000 fb1c 	bl	800175c <setTimer_display_7seg>
			display_7segled(index_7seg_led++);
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <handle_FSM+0x70c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	4955      	ldr	r1, [pc, #340]	; (8001280 <handle_FSM+0x70c>)
 800112c:	600a      	str	r2, [r1, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fbbe 	bl	80008b0 <display_7segled>
			index_7seg_led %= 2;
 8001134:	4b52      	ldr	r3, [pc, #328]	; (8001280 <handle_FSM+0x70c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	bfb8      	it	lt
 8001140:	425b      	neglt	r3, r3
 8001142:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <handle_FSM+0x70c>)
 8001144:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f902 	bl	8001350 <is_button_pressed>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d014      	beq.n	800117c <handle_FSM+0x608>
			current_state = MAN_GREEN;
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <handle_FSM+0x710>)
 8001154:	2207      	movs	r2, #7
 8001156:	701a      	strb	r2, [r3, #0]
			display_7seg_road_1 = 4;
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <handle_FSM+0x714>)
 800115a:	2204      	movs	r2, #4
 800115c:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = green_time;
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <handle_FSM+0x728>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <handle_FSM+0x71c>)
 8001164:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8001166:	4b48      	ldr	r3, [pc, #288]	; (8001288 <handle_FSM+0x714>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <handle_FSM+0x71c>)
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f809 	bl	8000188 <update_buffer_7seg>
			setTimer_led_man(25);
 8001176:	2019      	movs	r0, #25
 8001178:	f000 fb04 	bl	8001784 <setTimer_led_man>
		}
		if(is_button_pressed(1)){
 800117c:	2001      	movs	r0, #1
 800117e:	f000 f8e7 	bl	8001350 <is_button_pressed>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d017      	beq.n	80011b8 <handle_FSM+0x644>
			amber_time_increase++;
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <handle_FSM+0x72c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <handle_FSM+0x72c>)
 8001190:	6013      	str	r3, [r2, #0]
			if(amber_time_increase >= 100) amber_time_increase = 1;
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <handle_FSM+0x72c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b63      	cmp	r3, #99	; 0x63
 8001198:	dd02      	ble.n	80011a0 <handle_FSM+0x62c>
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <handle_FSM+0x72c>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = amber_time_increase;
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <handle_FSM+0x72c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <handle_FSM+0x71c>)
 80011a6:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <handle_FSM+0x714>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a38      	ldr	r2, [pc, #224]	; (8001290 <handle_FSM+0x71c>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7fe ffe8 	bl	8000188 <update_buffer_7seg>
		}
		if(is_button_pressed(2)){
 80011b8:	2002      	movs	r0, #2
 80011ba:	f000 f8c9 	bl	8001350 <is_button_pressed>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b3 	beq.w	800132c <handle_FSM+0x7b8>
			amber_time = amber_time_increase;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <handle_FSM+0x72c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <handle_FSM+0x718>)
 80011cc:	6013      	str	r3, [r2, #0]
		}
		break;
 80011ce:	e0ad      	b.n	800132c <handle_FSM+0x7b8>
	case MAN_GREEN:
		if(led_man_flag){
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <handle_FSM+0x704>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <handle_FSM+0x66e>
			setTimer_led_man(25);
 80011d8:	2019      	movs	r0, #25
 80011da:	f000 fad3 	bl	8001784 <setTimer_led_man>
			toggle_led_green();
 80011de:	f7ff fca7 	bl	8000b30 <toggle_led_green>
		}
		if(display_7seg_flag){
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <handle_FSM+0x708>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d013      	beq.n	8001212 <handle_FSM+0x69e>
			setTimer_display_7seg(50);
 80011ea:	2032      	movs	r0, #50	; 0x32
 80011ec:	f000 fab6 	bl	800175c <setTimer_display_7seg>
			display_7segled(index_7seg_led++);
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <handle_FSM+0x70c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	4922      	ldr	r1, [pc, #136]	; (8001280 <handle_FSM+0x70c>)
 80011f8:	600a      	str	r2, [r1, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fb58 	bl	80008b0 <display_7segled>
			index_7seg_led %= 2;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <handle_FSM+0x70c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	bfb8      	it	lt
 800120c:	425b      	neglt	r3, r3
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <handle_FSM+0x70c>)
 8001210:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)){
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f89c 	bl	8001350 <is_button_pressed>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <handle_FSM+0x6b0>
			current_state = CHECK_STATE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <handle_FSM+0x710>)
 8001220:	2208      	movs	r2, #8
 8001222:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(1)){
 8001224:	2001      	movs	r0, #1
 8001226:	f000 f893 	bl	8001350 <is_button_pressed>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d017      	beq.n	8001260 <handle_FSM+0x6ec>
			green_time_increase++;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <handle_FSM+0x730>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <handle_FSM+0x730>)
 8001238:	6013      	str	r3, [r2, #0]
			if(green_time_increase >= 100) green_time_increase = 1;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <handle_FSM+0x730>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b63      	cmp	r3, #99	; 0x63
 8001240:	dd02      	ble.n	8001248 <handle_FSM+0x6d4>
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <handle_FSM+0x730>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
			display_7seg_road_2 = green_time_increase;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <handle_FSM+0x730>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <handle_FSM+0x71c>)
 800124e:	6013      	str	r3, [r2, #0]
			update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <handle_FSM+0x714>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <handle_FSM+0x71c>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ff94 	bl	8000188 <update_buffer_7seg>
		}
		if(is_button_pressed(2)){
 8001260:	2002      	movs	r0, #2
 8001262:	f000 f875 	bl	8001350 <is_button_pressed>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d061      	beq.n	8001330 <handle_FSM+0x7bc>
			green_time = green_time_increase;
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <handle_FSM+0x730>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <handle_FSM+0x728>)
 8001272:	6013      	str	r3, [r2, #0]
		}
		break;
 8001274:	e05c      	b.n	8001330 <handle_FSM+0x7bc>
 8001276:	bf00      	nop
 8001278:	200000bc 	.word	0x200000bc
 800127c:	200000b4 	.word	0x200000b4
 8001280:	2000005c 	.word	0x2000005c
 8001284:	20000060 	.word	0x20000060
 8001288:	20000054 	.word	0x20000054
 800128c:	20000008 	.word	0x20000008
 8001290:	20000058 	.word	0x20000058
 8001294:	20000010 	.word	0x20000010
 8001298:	20000004 	.word	0x20000004
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000014 	.word	0x20000014
 80012a4:	2000000c 	.word	0x2000000c
	case CHECK_STATE:
		off_all_led();
 80012a8:	f7ff fb56 	bl	8000958 <off_all_led>
		off_all_7seg();
 80012ac:	f7fe ff4e 	bl	800014c <off_all_7seg>
		current_state = RED_GREEN;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <handle_FSM+0x7c4>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
		if(green_time + amber_time != red_time){
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <handle_FSM+0x7c8>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <handle_FSM+0x7cc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	441a      	add	r2, r3
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <handle_FSM+0x7d0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d008      	beq.n	80012da <handle_FSM+0x766>
			green_time = GREEN_DEFAULT_TIME;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <handle_FSM+0x7c8>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	601a      	str	r2, [r3, #0]
			red_time = RED_DEFAULT_TIME;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <handle_FSM+0x7d0>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	601a      	str	r2, [r3, #0]
			amber_time = AMBER_DEFAULT_TIME;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <handle_FSM+0x7cc>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	601a      	str	r2, [r3, #0]
		}
		display_7seg_road_1 = red_time;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <handle_FSM+0x7d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <handle_FSM+0x7d4>)
 80012e0:	6013      	str	r3, [r2, #0]
		display_7seg_road_2 = green_time;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <handle_FSM+0x7c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <handle_FSM+0x7d8>)
 80012e8:	6013      	str	r3, [r2, #0]
		setTimer_transfer(green_time*100);
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <handle_FSM+0x7c8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2264      	movs	r2, #100	; 0x64
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fa09 	bl	800170c <setTimer_transfer>
		setTimer_down(100);
 80012fa:	2064      	movs	r0, #100	; 0x64
 80012fc:	f000 fa1a 	bl	8001734 <setTimer_down>
		setTimer_display_7seg(50);
 8001300:	2032      	movs	r0, #50	; 0x32
 8001302:	f000 fa2b 	bl	800175c <setTimer_display_7seg>
		update_buffer_7seg(display_7seg_road_1, display_7seg_road_2);
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <handle_FSM+0x7d4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <handle_FSM+0x7d8>)
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff39 	bl	8000188 <update_buffer_7seg>
	}
}
 8001316:	e00c      	b.n	8001332 <handle_FSM+0x7be>
		break;
 8001318:	bf00      	nop
 800131a:	e00a      	b.n	8001332 <handle_FSM+0x7be>
		break;
 800131c:	bf00      	nop
 800131e:	e008      	b.n	8001332 <handle_FSM+0x7be>
		break;
 8001320:	bf00      	nop
 8001322:	e006      	b.n	8001332 <handle_FSM+0x7be>
		break;
 8001324:	bf00      	nop
 8001326:	e004      	b.n	8001332 <handle_FSM+0x7be>
		break;
 8001328:	bf00      	nop
 800132a:	e002      	b.n	8001332 <handle_FSM+0x7be>
		break;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <handle_FSM+0x7be>
		break;
 8001330:	bf00      	nop
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000060 	.word	0x20000060
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004
 8001348:	20000054 	.word	0x20000054
 800134c:	20000058 	.word	0x20000058

08001350 <is_button_pressed>:
uint16_t BUTTON_PIN[NUM_BUTTONS] = {BUTTON_1_PIN, BUTTON_2_PIN, BUTTON_3_PIN};

int TimeOutForKeyProcess[NUM_BUTTONS] = {200, 200, 200};
int button_flag[NUM_BUTTONS] = {0, 0, 0};

int is_button_pressed(int num){
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <is_button_pressed+0x30>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <is_button_pressed+0x22>
		button_flag[num] = 0;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <is_button_pressed+0x30>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2100      	movs	r1, #0
 800136a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <is_button_pressed+0x24>
	}
	return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000094 	.word	0x20000094

08001384 <subKeyProcess>:
void subKeyProcess(int num){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	button_flag[num] = 1;
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <subKeyProcess+0x1c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2101      	movs	r1, #1
 8001392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000094 	.word	0x20000094

080013a4 <getKeyInput>:
void getKeyInput(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTONS; i++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e06e      	b.n	800148e <getKeyInput+0xea>
		KeyReg2[i] = KeyReg1[i];
 80013b0:	4a3b      	ldr	r2, [pc, #236]	; (80014a0 <getKeyInput+0xfc>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b8:	493a      	ldr	r1, [pc, #232]	; (80014a4 <getKeyInput+0x100>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80013c0:	4a39      	ldr	r2, [pc, #228]	; (80014a8 <getKeyInput+0x104>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <getKeyInput+0xfc>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON_PIN[i]);
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <getKeyInput+0x108>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d8:	4619      	mov	r1, r3
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <getKeyInput+0x10c>)
 80013dc:	f000 fdda 	bl	8001f94 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <getKeyInput+0x104>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg2[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg0[i])){
 80013ec:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <getKeyInput+0x100>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f4:	492a      	ldr	r1, [pc, #168]	; (80014a0 <getKeyInput+0xfc>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d143      	bne.n	8001488 <getKeyInput+0xe4>
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <getKeyInput+0xfc>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001408:	4927      	ldr	r1, [pc, #156]	; (80014a8 <getKeyInput+0x104>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001410:	429a      	cmp	r2, r3
 8001412:	d139      	bne.n	8001488 <getKeyInput+0xe4>
			if(KeyReg2[i] != KeyReg3[i]){
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <getKeyInput+0x100>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800141c:	4925      	ldr	r1, [pc, #148]	; (80014b4 <getKeyInput+0x110>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001424:	429a      	cmp	r2, r3
 8001426:	d016      	beq.n	8001456 <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <getKeyInput+0x100>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001430:	4920      	ldr	r1, [pc, #128]	; (80014b4 <getKeyInput+0x110>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg3[i] == BUTTON_IS_RELEASED){
 8001438:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <getKeyInput+0x110>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d121      	bne.n	8001488 <getKeyInput+0xe4>
					TimeOutForKeyProcess[i] = 200;
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <getKeyInput+0x114>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	21c8      	movs	r1, #200	; 0xc8
 800144a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff98 	bl	8001384 <subKeyProcess>
 8001454:	e018      	b.n	8001488 <getKeyInput+0xe4>
				}
			}
			else{
				TimeOutForKeyProcess[i]--;
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <getKeyInput+0x114>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	4915      	ldr	r1, [pc, #84]	; (80014b8 <getKeyInput+0x114>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeOutForKeyProcess[i] == 0){
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <getKeyInput+0x114>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <getKeyInput+0xe4>
					TimeOutForKeyProcess[i] = 200;
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <getKeyInput+0x114>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	21c8      	movs	r1, #200	; 0xc8
 800147a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = BUTTON_IS_PRESSED;
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <getKeyInput+0x110>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2100      	movs	r1, #0
 8001484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTONS; i++){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	dd8d      	ble.n	80013b0 <getKeyInput+0xc>
				}
			}
		}

	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000070 	.word	0x20000070
 80014a4:	2000007c 	.word	0x2000007c
 80014a8:	20000064 	.word	0x20000064
 80014ac:	20000018 	.word	0x20000018
 80014b0:	40010800 	.word	0x40010800
 80014b4:	20000088 	.word	0x20000088
 80014b8:	20000020 	.word	0x20000020

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fa7e 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f80c 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f8aa 	bl	8001620 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014cc:	f000 f844 	bl	8001558 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <main+0x20>)
 80014d2:	f001 f9d3 	bl	800287c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  handle_FSM();
 80014d6:	f7ff fb4d 	bl	8000b74 <handle_FSM>
 80014da:	e7fc      	b.n	80014d6 <main+0x1a>
 80014dc:	200000d4 	.word	0x200000d4

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	2228      	movs	r2, #40	; 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fd80 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001506:	2301      	movs	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	2310      	movs	r3, #16
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd84 	bl	8002024 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001522:	f000 f8ed 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fff0 	bl	8002524 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800154a:	f000 f8d9 	bl	8001700 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3740      	adds	r7, #64	; 0x40
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_TIM2_Init+0xbc>)
 8001576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_TIM2_Init+0xbc>)
 800157e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <MX_TIM2_Init+0xbc>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_TIM2_Init+0xbc>)
 800158c:	2209      	movs	r2, #9
 800158e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_TIM2_Init+0xbc>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_TIM2_Init+0xbc>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159c:	481d      	ldr	r0, [pc, #116]	; (8001614 <MX_TIM2_Init+0xbc>)
 800159e:	f001 f91d 	bl	80027dc <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a8:	f000 f8aa 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <MX_TIM2_Init+0xbc>)
 80015ba:	f001 fab3 	bl	8002b24 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 f89c 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <MX_TIM2_Init+0xbc>)
 80015d6:	f001 fc7f 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e0:	f000 f88e 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  uint32_t TIMER_FRE = 8000000/((htim2.Init.Prescaler +1)*(htim2.Init.Period + 1));
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_TIM2_Init+0xbc>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <MX_TIM2_Init+0xbc>)
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	3201      	adds	r2, #1
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <MX_TIM2_Init+0xc0>)
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	61fb      	str	r3, [r7, #28]
  TIMER_INTERRUPT = 1000 / TIMER_FRE; //ms
 80015fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <MX_TIM2_Init+0xc4>)
 8001608:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000d4 	.word	0x200000d4
 8001618:	007a1200 	.word	0x007a1200
 800161c:	200000d0 	.word	0x200000d0

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_GPIO_Init+0xbc>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_GPIO_Init+0xbc>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_GPIO_Init+0xbc>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MX_GPIO_Init+0xbc>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <MX_GPIO_Init+0xbc>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_GPIO_Init+0xbc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001664:	2200      	movs	r2, #0
 8001666:	f24f 017e 	movw	r1, #61566	; 0xf07e
 800166a:	481d      	ldr	r0, [pc, #116]	; (80016e0 <MX_GPIO_Init+0xc0>)
 800166c:	f000 fca9 	bl	8001fc2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001670:	2200      	movs	r2, #0
 8001672:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001676:	481b      	ldr	r0, [pc, #108]	; (80016e4 <MX_GPIO_Init+0xc4>)
 8001678:	f000 fca3 	bl	8001fc2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800167c:	f24f 037e 	movw	r3, #61566	; 0xf07e
 8001680:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4619      	mov	r1, r3
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <MX_GPIO_Init+0xc0>)
 8001696:	f000 fb03 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800169a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_GPIO_Init+0xc4>)
 80016b4:	f000 faf4 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80016b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_GPIO_Init+0xc0>)
 80016ce:	f000 fae7 	bl	8001ca0 <HAL_GPIO_Init>

}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	timer_run();
 80016f0:	f000 f85c 	bl	80017ac <timer_run>
	getKeyInput();
 80016f4:	f7ff fe56 	bl	80013a4 <getKeyInput>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <setTimer_transfer>:
int display_7seg_flag = 0;

int counter4 = 0;
int led_man_flag = 0;

void setTimer_transfer(int num){
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	counter1 = num;
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <setTimer_transfer+0x20>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
	transfer_flag = 0;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <setTimer_transfer+0x24>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200000a0 	.word	0x200000a0
 8001730:	200000a4 	.word	0x200000a4

08001734 <setTimer_down>:
void setTimer_down(int num){
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	counter2 = num;
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <setTimer_down+0x20>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
	down_flag = 0;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <setTimer_down+0x24>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000a8 	.word	0x200000a8
 8001758:	200000ac 	.word	0x200000ac

0800175c <setTimer_display_7seg>:
void setTimer_display_7seg(int num){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	counter3 = num;
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <setTimer_display_7seg+0x20>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
	display_7seg_flag = 0;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <setTimer_display_7seg+0x24>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200000b0 	.word	0x200000b0
 8001780:	200000b4 	.word	0x200000b4

08001784 <setTimer_led_man>:
void setTimer_led_man(int num){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	counter4 = num;
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <setTimer_led_man+0x20>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
	led_man_flag = 0;
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <setTimer_led_man+0x24>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200000b8 	.word	0x200000b8
 80017a8:	200000bc 	.word	0x200000bc

080017ac <timer_run>:

void timer_run(){
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	if(counter1 > 0){
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <timer_run+0x8c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd0b      	ble.n	80017d0 <timer_run+0x24>
		counter1--;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <timer_run+0x8c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <timer_run+0x8c>)
 80017c0:	6013      	str	r3, [r2, #0]
		if(counter1 <= 0){
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <timer_run+0x8c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dc02      	bgt.n	80017d0 <timer_run+0x24>
			transfer_flag = 1;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <timer_run+0x90>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
		}
	}
	if(counter2 > 0){
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <timer_run+0x94>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0b      	ble.n	80017f0 <timer_run+0x44>
		counter2--;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <timer_run+0x94>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <timer_run+0x94>)
 80017e0:	6013      	str	r3, [r2, #0]
		if(counter2 <= 0){
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <timer_run+0x94>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <timer_run+0x44>
			down_flag = 1;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <timer_run+0x98>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(counter3 > 0){
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <timer_run+0x9c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0b      	ble.n	8001810 <timer_run+0x64>
		counter3--;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <timer_run+0x9c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <timer_run+0x9c>)
 8001800:	6013      	str	r3, [r2, #0]
		if(counter3 <= 0){
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <timer_run+0x9c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc02      	bgt.n	8001810 <timer_run+0x64>
			display_7seg_flag = 1;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <timer_run+0xa0>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
		}
	}
	if(counter4 > 0){
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <timer_run+0xa4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timer_run+0x84>
		counter4--;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <timer_run+0xa4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <timer_run+0xa4>)
 8001820:	6013      	str	r3, [r2, #0]
		if(counter4 <= 0){
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <timer_run+0xa4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dc02      	bgt.n	8001830 <timer_run+0x84>
			led_man_flag = 1;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <timer_run+0xa8>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	200000a0 	.word	0x200000a0
 800183c:	200000a4 	.word	0x200000a4
 8001840:	200000a8 	.word	0x200000a8
 8001844:	200000ac 	.word	0x200000ac
 8001848:	200000b0 	.word	0x200000b0
 800184c:	200000b4 	.word	0x200000b4
 8001850:	200000b8 	.word	0x200000b8
 8001854:	200000bc 	.word	0x200000bc

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_MspInit+0x5c>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_MspInit+0x5c>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6193      	str	r3, [r2, #24]
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_MspInit+0x5c>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_MspInit+0x5c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_MspInit+0x5c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_MspInit+0x5c>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_MspInit+0x60>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_MspInit+0x60>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d113      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201c      	movs	r0, #28
 80018ec:	f000 f9a1 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f0:	201c      	movs	r0, #28
 80018f2:	f000 f9ba 	bl	8001c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f000 f87f 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM2_IRQHandler+0x10>)
 800195a:	f000 ffdb 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000d4 	.word	0x200000d4

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff fff8 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001990:	4c09      	ldr	r4, [pc, #36]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f001 fb05 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fd8b 	bl	80014bc <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80019b0:	08003048 	.word	0x08003048
  ldr r2, =_sbss
 80019b4:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80019b8:	20000120 	.word	0x20000120

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f923 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff ff3c 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f93b 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f903 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000002c 	.word	0x2000002c
 8001a44:	20000034 	.word	0x20000034
 8001a48:	20000030 	.word	0x20000030

08001a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x1c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x20>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_IncTick+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000034 	.word	0x20000034
 8001a6c:	2000011c 	.word	0x2000011c

08001a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <HAL_GetTick+0x10>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	2000011c 	.word	0x2000011c

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4906      	ldr	r1, [pc, #24]	; (8001b1c <__NVIC_EnableIRQ+0x34>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff90 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff2d 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff42 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff90 	bl	8001b74 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5f 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff35 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e148      	b.n	8001f46 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8137 	bne.w	8001f40 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4aa3      	ldr	r2, [pc, #652]	; (8001f64 <HAL_GPIO_Init+0x2c4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05e      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cdc:	4aa1      	ldr	r2, [pc, #644]	; (8001f64 <HAL_GPIO_Init+0x2c4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d875      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001ce2:	4aa1      	ldr	r2, [pc, #644]	; (8001f68 <HAL_GPIO_Init+0x2c8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d058      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001ce8:	4a9f      	ldr	r2, [pc, #636]	; (8001f68 <HAL_GPIO_Init+0x2c8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d86f      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cee:	4a9f      	ldr	r2, [pc, #636]	; (8001f6c <HAL_GPIO_Init+0x2cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d052      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cf4:	4a9d      	ldr	r2, [pc, #628]	; (8001f6c <HAL_GPIO_Init+0x2cc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d869      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cfa:	4a9d      	ldr	r2, [pc, #628]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04c      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d00:	4a9b      	ldr	r2, [pc, #620]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d863      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d06:	4a9b      	ldr	r2, [pc, #620]	; (8001f74 <HAL_GPIO_Init+0x2d4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d046      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d0c:	4a99      	ldr	r2, [pc, #612]	; (8001f74 <HAL_GPIO_Init+0x2d4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d85d      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d82a      	bhi.n	8001d6c <HAL_GPIO_Init+0xcc>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d859      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <HAL_GPIO_Init+0x80>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d87 	.word	0x08001d87
 8001d2c:	08001dc9 	.word	0x08001dc9
 8001d30:	08001dcf 	.word	0x08001dcf
 8001d34:	08001dcf 	.word	0x08001dcf
 8001d38:	08001dcf 	.word	0x08001dcf
 8001d3c:	08001dcf 	.word	0x08001dcf
 8001d40:	08001dcf 	.word	0x08001dcf
 8001d44:	08001dcf 	.word	0x08001dcf
 8001d48:	08001dcf 	.word	0x08001dcf
 8001d4c:	08001dcf 	.word	0x08001dcf
 8001d50:	08001dcf 	.word	0x08001dcf
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001dcf 	.word	0x08001dcf
 8001d5c:	08001dcf 	.word	0x08001dcf
 8001d60:	08001dcf 	.word	0x08001dcf
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001d91 	.word	0x08001d91
 8001d6c:	4a82      	ldr	r2, [pc, #520]	; (8001f78 <HAL_GPIO_Init+0x2d8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d72:	e02c      	b.n	8001dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e029      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	3304      	adds	r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e024      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e01f      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	330c      	adds	r3, #12
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e01a      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da2:	2304      	movs	r3, #4
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e013      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	611a      	str	r2, [r3, #16]
          break;
 8001dba:	e009      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	615a      	str	r2, [r3, #20]
          break;
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          break;
 8001dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d801      	bhi.n	8001dda <HAL_GPIO_Init+0x13a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_Init+0x13e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d802      	bhi.n	8001dec <HAL_GPIO_Init+0x14c>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x152>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	3b08      	subs	r3, #8
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	210f      	movs	r1, #15
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8090 	beq.w	8001f40 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e20:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x2dc>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_GPIO_Init+0x2dc>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_GPIO_Init+0x2dc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x2e0>)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_GPIO_Init+0x2e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1e0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1dc>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a47      	ldr	r2, [pc, #284]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1d8>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1e2>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1e2>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1e2>
 8001e80:	2300      	movs	r3, #0
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e92:	493b      	ldr	r1, [pc, #236]	; (8001f80 <HAL_GPIO_Init+0x2e0>)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4937      	ldr	r1, [pc, #220]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eba:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4933      	ldr	r1, [pc, #204]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	492d      	ldr	r1, [pc, #180]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4929      	ldr	r1, [pc, #164]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4923      	ldr	r1, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	491f      	ldr	r1, [pc, #124]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4919      	ldr	r1, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4915      	ldr	r1, [pc, #84]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3301      	adds	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f aeaf 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	372c      	adds	r7, #44	; 0x2c
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	10320000 	.word	0x10320000
 8001f68:	10310000 	.word	0x10310000
 8001f6c:	10220000 	.word	0x10220000
 8001f70:	10210000 	.word	0x10210000
 8001f74:	10120000 	.word	0x10120000
 8001f78:	10110000 	.word	0x10110000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40010800 	.word	0x40010800
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	807b      	strh	r3, [r7, #2]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd2:	787b      	ldrb	r3, [r7, #1]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fde:	e003      	b.n	8001fe8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	611a      	str	r2, [r3, #16]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43d9      	mvns	r1, r3
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	400b      	ands	r3, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e26c      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8087 	beq.w	8002152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	4b92      	ldr	r3, [pc, #584]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b04      	cmp	r3, #4
 800204e:	d00c      	beq.n	800206a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002050:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d112      	bne.n	8002082 <HAL_RCC_OscConfig+0x5e>
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d10b      	bne.n	8002082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06c      	beq.n	8002150 <HAL_RCC_OscConfig+0x12c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d168      	bne.n	8002150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e246      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x76>
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e02e      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x98>
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e01d      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0xbc>
 80020c6:	4b72      	ldr	r3, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a71      	ldr	r2, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6e      	ldr	r2, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020e0:	4b6b      	ldr	r3, [pc, #428]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a67      	ldr	r2, [pc, #412]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fcb6 	bl	8001a70 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fcb2 	bl	8001a70 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1fa      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xe4>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fca2 	bl	8001a70 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff fc9e 	bl	8001a70 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1e6      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x10c>
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d063      	beq.n	8002226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215e:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x18c>
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x176>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1ba      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4939      	ldr	r1, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	e03a      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_OscConfig+0x270>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7ff fc57 	bl	8001a70 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff fc53 	bl	8001a70 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e19b      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x270>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fc36 	bl	8001a70 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7ff fc32 	bl	8001a70 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e17a      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03a      	beq.n	80022a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d019      	beq.n	800226e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7ff fc16 	bl	8001a70 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7ff fc12 	bl	8001a70 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e15a      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_OscConfig+0x26c>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 fa9a 	bl	80027a0 <RCC_Delay>
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7ff fbfc 	bl	8001a70 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227a:	e00f      	b.n	800229c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7ff fbf8 	bl	8001a70 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d908      	bls.n	800229c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e140      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	42420000 	.word	0x42420000
 8002298:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b9e      	ldr	r3, [pc, #632]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e9      	bne.n	800227c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a6 	beq.w	8002402 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b97      	ldr	r3, [pc, #604]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10d      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b94      	ldr	r3, [pc, #592]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a93      	ldr	r2, [pc, #588]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	4b91      	ldr	r3, [pc, #580]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a8a      	ldr	r2, [pc, #552]	; (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fbb9 	bl	8001a70 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff fbb5 	bl	8001a70 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0fd      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x312>
 8002328:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e02d      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x334>
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	e01c      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d10c      	bne.n	800237a <HAL_RCC_OscConfig+0x356>
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a6c      	ldr	r2, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a69      	ldr	r2, [pc, #420]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e00b      	b.n	8002392 <HAL_RCC_OscConfig+0x36e>
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a66      	ldr	r2, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a63      	ldr	r2, [pc, #396]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff fb69 	bl	8001a70 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7ff fb65 	bl	8001a70 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0ab      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ee      	beq.n	80023a2 <HAL_RCC_OscConfig+0x37e>
 80023c4:	e014      	b.n	80023f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fb53 	bl	8001a70 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff fb4f 	bl	8001a70 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e095      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ee      	bne.n	80023ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8081 	beq.w	800250e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240c:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d061      	beq.n	80024dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d146      	bne.n	80024ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_OscConfig+0x4fc>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fb23 	bl	8001a70 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fb1f 	bl	8001a70 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e067      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d108      	bne.n	8002468 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	492d      	ldr	r1, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a19      	ldr	r1, [r3, #32]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	430b      	orrs	r3, r1
 800247a:	4927      	ldr	r1, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x4fc>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7ff faf3 	bl	8001a70 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7ff faef 	bl	8001a70 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e037      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x46a>
 80024ac:	e02f      	b.n	800250e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_RCC_OscConfig+0x4fc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fadc 	bl	8001a70 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7ff fad8 	bl	8001a70 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e020      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x498>
 80024da:	e018      	b.n	800250e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e013      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
 8002520:	42420060 	.word	0x42420060

08002524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d0      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4965      	ldr	r1, [pc, #404]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800258a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d040      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e073      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4936      	ldr	r1, [pc, #216]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7ff fa2c 	bl	8001a70 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7ff fa28 	bl	8001a70 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e053      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d210      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1cc>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f98a 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40021000 	.word	0x40021000
 80026ec:	0800301c 	.word	0x0800301c
 80026f0:	2000002c 	.word	0x2000002c
 80026f4:	20000030 	.word	0x20000030

080026f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x30>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x36>
 8002726:	e027      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	613b      	str	r3, [r7, #16]
      break;
 800272c:	e027      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0c5b      	lsrs	r3, r3, #17
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	fb02 f203 	mul.w	r2, r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_RCC_GetSysClockFreq+0xa4>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	613b      	str	r3, [r7, #16]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800277a:	613b      	str	r3, [r7, #16]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	693b      	ldr	r3, [r7, #16]
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200
 8002794:	0800302c 	.word	0x0800302c
 8002798:	0800303c 	.word	0x0800303c
 800279c:	003d0900 	.word	0x003d0900

080027a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <RCC_Delay+0x34>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <RCC_Delay+0x38>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0a5b      	lsrs	r3, r3, #9
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027bc:	bf00      	nop
  }
  while (Delay --);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	60fa      	str	r2, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <RCC_Delay+0x1c>
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	2000002c 	.word	0x2000002c
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff f85a 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fa6e 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e035      	b.n	8002900 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_TIM_Base_Start_IT+0x90>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x4e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d004      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x4e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIM_Base_Start_IT+0x94>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d111      	bne.n	80028ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d010      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	e007      	b.n	80028fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0202 	mvn.w	r2, #2
 8002940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f9b4 	bl	8002cc4 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f9a7 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f9b6 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0204 	mvn.w	r2, #4
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f98a 	bl	8002cc4 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f97d 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f98c 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0208 	mvn.w	r2, #8
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f960 	bl	8002cc4 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f953 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f962 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f936 	bl	8002cc4 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f929 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f938 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0201 	mvn.w	r2, #1
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fe28 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa6b 	bl	8002f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8fc 	bl	8002ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0220 	mvn.w	r2, #32
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa36 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_ConfigClockSource+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0b4      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x186>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b78:	d03e      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7e:	f200 8087 	bhi.w	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	f000 8086 	beq.w	8002c96 <HAL_TIM_ConfigClockSource+0x172>
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8e:	d87f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	d01a      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xa6>
 8002b94:	2b70      	cmp	r3, #112	; 0x70
 8002b96:	d87b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d050      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x11a>
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d877      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d03c      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xfa>
 8002ba4:	2b50      	cmp	r3, #80	; 0x50
 8002ba6:	d873      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d058      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x13a>
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d86f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d064      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	2b30      	cmp	r3, #48	; 0x30
 8002bb6:	d86b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d060      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d867      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d05a      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	e062      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f000 f95e 	bl	8002e9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	609a      	str	r2, [r3, #8]
      break;
 8002bf6:	e04f      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f000 f947 	bl	8002e9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e03c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 f8be 	bl	8002dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2150      	movs	r1, #80	; 0x50
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f915 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e02c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 f8dc 	bl	8002e08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2160      	movs	r1, #96	; 0x60
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f905 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e01c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 f89e 	bl	8002dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f8f5 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e00c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f000 f8ec 	bl	8002e66 <TIM_ITRx_SetConfig>
      break;
 8002c8e:	e003      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e000      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
	...

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <TIM_Base_SetConfig+0xa8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x28>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x28>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <TIM_Base_SetConfig+0xac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <TIM_Base_SetConfig+0xa8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_Base_SetConfig+0x52>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d003      	beq.n	8002d4e <TIM_Base_SetConfig+0x52>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <TIM_Base_SetConfig+0xac>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d108      	bne.n	8002d60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <TIM_Base_SetConfig+0xa8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f023 0210 	bic.w	r2, r3, #16
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f043 0307 	orr.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	609a      	str	r2, [r3, #8]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e041      	b.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f000 f822 	bl	8003004 <_init>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003040 	.word	0x08003040
 8002fe8:	08003040 	.word	0x08003040
 8002fec:	08003040 	.word	0x08003040
 8002ff0:	08003044 	.word	0x08003044

08002ff4 <memset>:
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4402      	add	r2, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
